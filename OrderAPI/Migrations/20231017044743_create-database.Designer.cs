// <auto-generated />
using System;
using Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace OrderAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231017044743_create-database")]
    partial class createdatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Context.Entities.Didi.DidiOrder", b =>
                {
                    b.Property<long>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("before_status")
                        .HasColumnType("int");

                    b.Property<int>("cancel_time")
                        .HasColumnType("int");

                    b.Property<int>("city_id")
                        .HasColumnType("int");

                    b.Property<int>("complete_time")
                        .HasColumnType("int");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("create_time")
                        .HasColumnType("int");

                    b.Property<int>("delivery_type")
                        .HasColumnType("int");

                    b.Property<int>("expected_arrived_eta")
                        .HasColumnType("int");

                    b.Property<int>("expected_cook_eta")
                        .HasColumnType("int");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<int>("order_index")
                        .HasColumnType("int");

                    b.Property<int>("pay_time")
                        .HasColumnType("int");

                    b.Property<int>("pay_type")
                        .HasColumnType("int");

                    b.Property<int>("priceid")
                        .HasColumnType("int");

                    b.Property<long>("receive_addressuid")
                        .HasColumnType("bigint");

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("shop_accept_status")
                        .HasColumnType("int");

                    b.Property<int>("shop_confirm_time")
                        .HasColumnType("int");

                    b.Property<int>("shopid")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("timezone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("order_id");

                    b.HasIndex("orderId");

                    b.HasIndex("priceid");

                    b.HasIndex("receive_addressuid");

                    b.HasIndex("shopid");

                    b.ToTable("DidiOrders");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.OrderItemInfo", b =>
                {
                    b.Property<long>("order_item_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DidiOrderorder_id")
                        .HasColumnType("bigint");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<string>("app_item_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("promo_type")
                        .HasColumnType("int");

                    b.Property<int?>("promotion_detailId")
                        .HasColumnType("int");

                    b.Property<int>("real_price")
                        .HasColumnType("int");

                    b.Property<int>("sku_price")
                        .HasColumnType("int");

                    b.Property<int>("submit_refund_amount")
                        .HasColumnType("int");

                    b.Property<int>("total_price")
                        .HasColumnType("int");

                    b.HasKey("order_item_id");

                    b.HasIndex("DidiOrderorder_id");

                    b.HasIndex("promotion_detailId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.PriceInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("delivery_discount")
                        .HasColumnType("int");

                    b.Property<int>("items_discount")
                        .HasColumnType("int");

                    b.Property<int>("order_price")
                        .HasColumnType("int");

                    b.Property<int>("refund_price")
                        .HasColumnType("int");

                    b.Property<int>("shop_paid_money")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("PricesInfo");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.Promotion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long?>("DidiOrderorder_id")
                        .HasColumnType("bigint");

                    b.Property<int>("promo_discount")
                        .HasColumnType("int");

                    b.Property<int>("promo_type")
                        .HasColumnType("int");

                    b.Property<int>("shop_subside_price")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DidiOrderorder_id");

                    b.ToTable("PromotionsInfo");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.PromotionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("promo_discount")
                        .HasColumnType("int");

                    b.Property<int>("promo_type")
                        .HasColumnType("int");

                    b.Property<int>("shop_subside_price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PromotionDetails");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ReceiveAddress", b =>
                {
                    b.Property<long>("uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("calling_code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("coordinate_type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("country_code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("house_number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("poi_address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("poi_display_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("poi_lat")
                        .HasColumnType("double");

                    b.Property<double>("poi_lng")
                        .HasColumnType("double");

                    b.HasKey("uid");

                    b.ToTable("ReceiveAddresses");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ShopInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("app_shop_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("shop_addr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("shop_id")
                        .HasColumnType("bigint");

                    b.Property<string>("shop_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.Shopper", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long?>("DidiOrderorder_id")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("DidiOrderorder_id");

                    b.ToTable("Shoppers");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ShopPhone", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ShopInfoid")
                        .HasColumnType("int");

                    b.Property<int>("calling_code")
                        .HasColumnType("int");

                    b.Property<long>("phone")
                        .HasColumnType("bigint");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("ShopInfoid");

                    b.ToTable("ShopPhones");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.SubItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long?>("OrderItemInfoorder_item_id")
                        .HasColumnType("bigint");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<string>("app_item_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("sku_price")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("OrderItemInfoorder_item_id");

                    b.ToTable("DidiSubItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.BillingInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("billing_type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("document_number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("document_type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BillingsInformation");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Charge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("service_fee")
                        .HasColumnType("int");

                    b.Property<int>("shipping")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Charges");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("document_number")
                        .HasColumnType("longtext");

                    b.Property<string>("first_name")
                        .HasColumnType("longtext");

                    b.Property<string>("last_name")
                        .HasColumnType("longtext");

                    b.Property<string>("phone_number")
                        .HasColumnType("longtext");

                    b.Property<string>("user_type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.DeliveryDiscount", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("total_percentage_discount")
                        .HasColumnType("int");

                    b.Property<int>("total_value_discount")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("DeliveryDiscounts");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.DeliveryInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("complement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("complete_address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("neighborhood")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("postal_code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("street_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("street_number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DeliveriesInformation");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("OrderDetailorder_id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("amount_by_partner")
                        .HasColumnType("int");

                    b.Property<int>("amount_by_rappi")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<int?>("discount_product_unit_value")
                        .HasColumnType("int");

                    b.Property<int>("discount_product_units")
                        .HasColumnType("int");

                    b.Property<bool>("includes_toppings")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("max_value")
                        .HasColumnType("int");

                    b.Property<int>("percentage_by_partners")
                        .HasColumnType("int");

                    b.Property<int>("percentage_by_rappi")
                        .HasColumnType("int");

                    b.Property<int?>("product_id")
                        .HasColumnType("int");

                    b.Property<int>("raw_value")
                        .HasColumnType("int");

                    b.Property<string>("sku")
                        .HasColumnType("longtext");

                    b.Property<string>("title")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.Property<string>("value_type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailorder_id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Item", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrderDetailorder_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("comments")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<int>("percentage_discount")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("sku")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("OrderDetailorder_id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.OrderDetail", b =>
                {
                    b.Property<string>("order_id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("billing_informationId")
                        .HasColumnType("int");

                    b.Property<int>("coooking_time")
                        .HasColumnType("int");

                    b.Property<string>("created_at")
                        .HasColumnType("longtext");

                    b.Property<int?>("delivery_discountid")
                        .HasColumnType("int");

                    b.Property<int?>("delivery_informationId")
                        .HasColumnType("int");

                    b.Property<string>("delivery_method")
                        .HasColumnType("longtext");

                    b.Property<int>("max_cooking_time")
                        .HasColumnType("int");

                    b.Property<int>("min_cooking_time")
                        .HasColumnType("int");

                    b.Property<string>("payment_method")
                        .HasColumnType("longtext");

                    b.Property<int?>("totalsId")
                        .HasColumnType("int");

                    b.HasKey("order_id");

                    b.HasIndex("billing_informationId");

                    b.HasIndex("delivery_discountid");

                    b.HasIndex("delivery_informationId");

                    b.HasIndex("totalsId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.OtherTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("tip")
                        .HasColumnType("int");

                    b.Property<int>("total_rappi_credits")
                        .HasColumnType("int");

                    b.Property<int>("total_rappi_pay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OtherTotals");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.RappiOrder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("customerId")
                        .HasColumnType("int");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<string>("order_detailorder_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("storeinternal_id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.HasIndex("orderId");

                    b.HasIndex("order_detailorder_id");

                    b.HasIndex("storeinternal_id");

                    b.ToTable("RappiOrders");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Store", b =>
                {
                    b.Property<string>("internal_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("external_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("internal_id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.SubItem", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Itemid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<int>("percentage_discount")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("sku")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Itemid");

                    b.ToTable("RappiSubItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Totals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("chargesId")
                        .HasColumnType("int");

                    b.Property<int>("discount_by_support")
                        .HasColumnType("int");

                    b.Property<int?>("other_totalsId")
                        .HasColumnType("int");

                    b.Property<int>("total_discounts")
                        .HasColumnType("int");

                    b.Property<int>("total_order")
                        .HasColumnType("int");

                    b.Property<int>("total_products")
                        .HasColumnType("int");

                    b.Property<int>("total_to_pay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("chargesId");

                    b.HasIndex("other_totalsId");

                    b.ToTable("Totals");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.ActionEligibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanAdjustReadyForPickupTime")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanMarkOutOfItem")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Cancel")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("ActionEligibility");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Adjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TotalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TotalId");

                    b.ToTable("Adjustments");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Allergen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("AllergyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.ToTable("Allergen");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("instructions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CartItemId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CustomerRequestsId")
                        .HasColumnType("int");

                    b.Property<int>("DefaultQuantityId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuantityId")
                        .HasColumnType("int");

                    b.Property<int?>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRequestsId");

                    b.HasIndex("DefaultQuantityId");

                    b.HasIndex("QuantityId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CashAmountDue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayAmount")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GrossId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaxInclusive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NetId")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrossId");

                    b.HasIndex("NetId");

                    b.HasIndex("TaxId");

                    b.ToTable("CashAmountDue");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryISO2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CurrentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("CurrentLocation");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CustomerRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.ToTable("CustomerRequests");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DeliveryId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DeliveryPartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryPartnerMarkedNotReadyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EstimatedPickUpTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UberOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryPartnerId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UberOrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.DeliveryPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("DeliveryPartner");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Discounted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CartItemId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuantityId")
                        .HasColumnType("int");

                    b.Property<int>("TotalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("QuantityId");

                    b.HasIndex("TotalId");

                    b.ToTable("Discounteds");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.DiscountedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CartItemId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DiscountAmountId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalItemDiscountId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UberPromotionDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountAmountId");

                    b.HasIndex("UberPromotionDetailId");

                    b.ToTable("DiscountedItem");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.DiscountedItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiscountAmountApplied")
                        .HasColumnType("int");

                    b.Property<int>("DiscountedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DiscountedItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.EligibleActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanAdjustReadyForPickupTime")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanMarkOutOfItem")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Cancel")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("EligibleActions");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.EncryptedTaxId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CipherText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EncryptedTaxId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.FailureInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FailureAttributedToParty")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TimeRangeId")
                        .HasColumnType("int");

                    b.Property<int?>("UberOrderId")
                        .HasColumnType("int");

                    b.Property<bool>("WillMerchantBePaid")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("TimeRangeId");

                    b.HasIndex("UberOrderId");

                    b.ToTable("FailureInfos");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.FeeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("FeesId")
                        .HasColumnType("int");

                    b.Property<int>("GrossAmountId")
                        .HasColumnType("int");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NetAmountId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxReportingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeesId");

                    b.HasIndex("GrossAmountId");

                    b.HasIndex("NetAmountId");

                    b.HasIndex("TaxReportingId");

                    b.ToTable("FeeDetail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Fees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TotalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TotalId");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.FulfillmentIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CartItemId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<string>("StoreResponse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SuspendUntil")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("FulfillmentIssue");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.ItemCharges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("PriceBreakdownId")
                        .HasColumnType("int");

                    b.Property<int>("SubtotalIncludingPromosId")
                        .HasColumnType("int");

                    b.Property<int>("TotalId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("PriceBreakdownId");

                    b.HasIndex("SubtotalIncludingPromosId");

                    b.HasIndex("TotalId");

                    b.HasIndex("UnitId");

                    b.ToTable("ItemCharges");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ClientProvidedStreetAddressLineOne")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<string>("LocationTypeValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddressLineOne")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StreetAddressLineTwo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.MetaInfo", b =>
                {
                    b.Property<string>("resource_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("resource_href")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("resource_id");

                    b.ToTable("MetaInfos");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Money", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AmountE5")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Formatted")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Monies");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.OAuthToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("OAuthTokens");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PartnerIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("IdentifierId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UberStoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UberStoreId");

                    b.ToTable("PartnerIdentifier");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdjustmentId")
                        .HasColumnType("int");

                    b.Property<int>("CashAmountDueId")
                        .HasColumnType("int");

                    b.Property<int>("FeesId")
                        .HasColumnType("int");

                    b.Property<int>("ItemChargesId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentDetailId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionsId")
                        .HasColumnType("int");

                    b.Property<int>("TaxReportingId")
                        .HasColumnType("int");

                    b.Property<int>("TipsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdjustmentId");

                    b.HasIndex("CashAmountDueId");

                    b.HasIndex("FeesId");

                    b.HasIndex("ItemChargesId");

                    b.HasIndex("PaymentDetailId");

                    b.HasIndex("PromotionsId");

                    b.HasIndex("TaxReportingId");

                    b.HasIndex("TipsId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsTaxInclusive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderTotalDisplayAmount")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrderTotalGrossId")
                        .HasColumnType("int");

                    b.Property<int>("OrderTotalNetId")
                        .HasColumnType("int");

                    b.Property<int>("OrderTotalTaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderTotalGrossId");

                    b.HasIndex("OrderTotalNetId");

                    b.HasIndex("OrderTotalTaxId");

                    b.ToTable("PaymentDetail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PreparationTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadyForPickupTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReadyForPickupTimeSecs")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PreparationTimes");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PriceBreakdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CartItemId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaxInclusive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuantityId")
                        .HasColumnType("int");

                    b.Property<int>("TotalId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("QuantityId");

                    b.HasIndex("TotalId");

                    b.HasIndex("UnitId");

                    b.ToTable("PriceBreakdowns");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Promotions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DetailsId")
                        .HasColumnType("int");

                    b.Property<int>("OrderTotalExcludingPromosId")
                        .HasColumnType("int");

                    b.Property<int>("TotalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DetailsId");

                    b.HasIndex("OrderTotalExcludingPromosId");

                    b.HasIndex("TotalId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Quantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Quantity");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.RemittanceSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AmountId")
                        .HasColumnType("int");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AmountId");

                    b.ToTable("RemittanceSummaries");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.RemovedModifierItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ModifierItemId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SelectedModifierGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SelectedModifierGroupId");

                    b.ToTable("RemovedModifierItem");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.RestrictedItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ContainAlcoholicItem")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ContainTobaccoProduct")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("RestrictedItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.RetailerLoyaltyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LoyaltyNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RetailerLoyaltyInfos");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.SelectedModifierGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CartItemId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ModifierGroupId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CartItemId");

                    b.ToTable("SelectedModifierGroup");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.SelectedModifierItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ModifierItemId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SelectedModifierGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SelectedModifierGroupId");

                    b.ToTable("SelectedModifierItem");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IncludeSingleUseItems")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RestrictedItemsId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UberOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestrictedItemsId");

                    b.HasIndex("UberOrderId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxBreakdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GrossAmountId")
                        .HasColumnType("int");

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NetAmountId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxReportingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrossAmountId");

                    b.HasIndex("NetAmountId");

                    b.HasIndex("TaxReportingId");

                    b.ToTable("TaxBreakdown");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EncryptedTaxIdId")
                        .HasColumnType("int");

                    b.Property<string>("LegalEntityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TaxIdType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TaxIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EncryptedTaxIdId");

                    b.ToTable("TaxProfile");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxReporting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TaxReportings");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TimeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TimeRanges");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Tips", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TotalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TotalId");

                    b.ToTable("Tips");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanResponseToFulfillmentIssues")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPrimaryCustomer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrderHistory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TaxProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("UberOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("TaxProfileId");

                    b.HasIndex("UberOrderId");

                    b.ToTable("UberCustomers");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("QuantityId")
                        .HasColumnType("int");

                    b.Property<int>("TotalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuantityId");

                    b.HasIndex("TotalId");

                    b.ToTable("UberDiscounts");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EligibleActionsId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FulfillmentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HasMembershipPass")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOrderAccuracyRisk")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrderingPlatform")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("PreparationStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PreparationTimeId")
                        .HasColumnType("int");

                    b.Property<int>("RetailerLoyaltyInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduledOrderTargetDeliveryEndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ScheduledOrderTargetDeliveryStartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("StoreInstructions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EligibleActionsId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PreparationTimeId");

                    b.HasIndex("RetailerLoyaltyInfoId");

                    b.HasIndex("StoreId");

                    b.HasIndex("orderId");

                    b.ToTable("UberOrders");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberPromotionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiscountDeliveryFeeValue")
                        .HasColumnType("int");

                    b.Property<string>("DiscountPercentage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DiscountValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalPromotionId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TaxReportingId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("TaxReportingId");

                    b.ToTable("UberPromotionDetail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UberStores");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HandoffInstructions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAutonomous")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Passcode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Entities.Context.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("provider")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.DidiOrder", b =>
                {
                    b.HasOne("Entities.Context.Order", "order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Didi.PriceInfo", "price")
                        .WithMany()
                        .HasForeignKey("priceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Didi.ReceiveAddress", "receive_address")
                        .WithMany()
                        .HasForeignKey("receive_addressuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Didi.ShopInfo", "shop")
                        .WithMany()
                        .HasForeignKey("shopid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("price");

                    b.Navigation("receive_address");

                    b.Navigation("shop");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.OrderItemInfo", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.DidiOrder", null)
                        .WithMany("order_items")
                        .HasForeignKey("DidiOrderorder_id");

                    b.HasOne("Entities.Context.Entities.Didi.PromotionDetail", "promotion_detail")
                        .WithMany()
                        .HasForeignKey("promotion_detailId");

                    b.Navigation("promotion_detail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.Promotion", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.DidiOrder", null)
                        .WithMany("promotions")
                        .HasForeignKey("DidiOrderorder_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.Shopper", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.DidiOrder", null)
                        .WithMany("shopper_info")
                        .HasForeignKey("DidiOrderorder_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ShopPhone", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.ShopInfo", null)
                        .WithMany("shop_phone")
                        .HasForeignKey("ShopInfoid");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.SubItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.OrderItemInfo", null)
                        .WithMany("sub_item_list")
                        .HasForeignKey("OrderItemInfoorder_item_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Discount", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.OrderDetail", null)
                        .WithMany("discounts")
                        .HasForeignKey("OrderDetailorder_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Item", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.OrderDetail", null)
                        .WithMany("items")
                        .HasForeignKey("OrderDetailorder_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.OrderDetail", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.BillingInformation", "billing_information")
                        .WithMany()
                        .HasForeignKey("billing_informationId");

                    b.HasOne("Entities.Context.Entities.Rappi.DeliveryDiscount", "delivery_discount")
                        .WithMany()
                        .HasForeignKey("delivery_discountid");

                    b.HasOne("Entities.Context.Entities.Rappi.DeliveryInformation", "delivery_information")
                        .WithMany()
                        .HasForeignKey("delivery_informationId");

                    b.HasOne("Entities.Context.Entities.Rappi.Totals", "totals")
                        .WithMany()
                        .HasForeignKey("totalsId");

                    b.Navigation("billing_information");

                    b.Navigation("delivery_discount");

                    b.Navigation("delivery_information");

                    b.Navigation("totals");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.RappiOrder", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId");

                    b.HasOne("Entities.Context.Order", "order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Rappi.OrderDetail", "order_detail")
                        .WithMany()
                        .HasForeignKey("order_detailorder_id");

                    b.HasOne("Entities.Context.Entities.Rappi.Store", "store")
                        .WithMany()
                        .HasForeignKey("storeinternal_id");

                    b.Navigation("customer");

                    b.Navigation("order");

                    b.Navigation("order_detail");

                    b.Navigation("store");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.SubItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.Item", null)
                        .WithMany("subitems")
                        .HasForeignKey("Itemid");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Totals", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.Charge", "charges")
                        .WithMany()
                        .HasForeignKey("chargesId");

                    b.HasOne("Entities.Context.Entities.Rappi.OtherTotal", "other_totals")
                        .WithMany()
                        .HasForeignKey("other_totalsId");

                    b.Navigation("charges");

                    b.Navigation("other_totals");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Adjustment", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Money", "Total")
                        .WithMany()
                        .HasForeignKey("TotalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Total");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Allergen", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Allergy", null)
                        .WithMany("AllergensNames")
                        .HasForeignKey("AllergyId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CartItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.CustomerRequests", "CustomerRequests")
                        .WithMany()
                        .HasForeignKey("CustomerRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Quantity", "DefaultQuantity")
                        .WithMany()
                        .HasForeignKey("DefaultQuantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Quantity", "Quantity")
                        .WithMany()
                        .HasForeignKey("QuantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.ShoppingCart", null)
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId");

                    b.Navigation("CustomerRequests");

                    b.Navigation("DefaultQuantity");

                    b.Navigation("Quantity");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CashAmountDue", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Money", "Gross")
                        .WithMany()
                        .HasForeignKey("GrossId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "Net")
                        .WithMany()
                        .HasForeignKey("NetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gross");

                    b.Navigation("Net");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CustomerRequests", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Allergy", "Allergy")
                        .WithMany()
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Delivery", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.DeliveryPartner", "DeliveryPartner")
                        .WithMany()
                        .HasForeignKey("DeliveryPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.UberOrder", null)
                        .WithMany("Deliveries")
                        .HasForeignKey("UberOrderId");

                    b.Navigation("DeliveryPartner");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.DeliveryPartner", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.CurrentLocation", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("CurrentLocation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Discounted", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberDiscount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Quantity", "Quantity")
                        .WithMany()
                        .HasForeignKey("QuantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "Total")
                        .WithMany()
                        .HasForeignKey("TotalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Quantity");

                    b.Navigation("Total");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.DiscountedItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Money", "DiscountAmount")
                        .WithMany()
                        .HasForeignKey("DiscountAmountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.UberPromotionDetail", null)
                        .WithMany("DiscountedItems")
                        .HasForeignKey("UberPromotionDetailId");

                    b.Navigation("DiscountAmount");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.FailureInfo", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.TimeRange", "TimeRange")
                        .WithMany()
                        .HasForeignKey("TimeRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.UberOrder", null)
                        .WithMany("FailureInfo")
                        .HasForeignKey("UberOrderId");

                    b.Navigation("TimeRange");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.FeeDetail", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Fees", null)
                        .WithMany("Details")
                        .HasForeignKey("FeesId");

                    b.HasOne("Entities.Context.Entities.Uber.Money", "GrossAmount")
                        .WithMany()
                        .HasForeignKey("GrossAmountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "NetAmount")
                        .WithMany()
                        .HasForeignKey("NetAmountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.TaxReporting", null)
                        .WithMany("Fees")
                        .HasForeignKey("TaxReportingId");

                    b.Navigation("GrossAmount");

                    b.Navigation("NetAmount");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Fees", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Money", "Total")
                        .WithMany()
                        .HasForeignKey("TotalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Total");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.FulfillmentIssue", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.ShoppingCart", null)
                        .WithMany("FulfillmentIssues")
                        .HasForeignKey("ShoppingCartId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.ItemCharges", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberDiscount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.PriceBreakdown", "PriceBreakdown")
                        .WithMany()
                        .HasForeignKey("PriceBreakdownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "SubtotalIncludingPromos")
                        .WithMany()
                        .HasForeignKey("SubtotalIncludingPromosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "Total")
                        .WithMany()
                        .HasForeignKey("TotalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("PriceBreakdown");

                    b.Navigation("SubtotalIncludingPromos");

                    b.Navigation("Total");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PartnerIdentifier", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberStore", null)
                        .WithMany("PartnerIdentifiers")
                        .HasForeignKey("UberStoreId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Payment", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Adjustment", "Adjustment")
                        .WithMany()
                        .HasForeignKey("AdjustmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.CashAmountDue", "CashAmountDue")
                        .WithMany()
                        .HasForeignKey("CashAmountDueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Fees", "Fees")
                        .WithMany()
                        .HasForeignKey("FeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.ItemCharges", "ItemCharges")
                        .WithMany()
                        .HasForeignKey("ItemChargesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.PaymentDetail", "PaymentDetail")
                        .WithMany()
                        .HasForeignKey("PaymentDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Promotions", "Promotions")
                        .WithMany()
                        .HasForeignKey("PromotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.TaxReporting", "TaxReporting")
                        .WithMany()
                        .HasForeignKey("TaxReportingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Tips", "Tips")
                        .WithMany()
                        .HasForeignKey("TipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adjustment");

                    b.Navigation("CashAmountDue");

                    b.Navigation("Fees");

                    b.Navigation("ItemCharges");

                    b.Navigation("PaymentDetail");

                    b.Navigation("Promotions");

                    b.Navigation("TaxReporting");

                    b.Navigation("Tips");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PaymentDetail", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Money", "OrderTotalGross")
                        .WithMany()
                        .HasForeignKey("OrderTotalGrossId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "OrderTotalNet")
                        .WithMany()
                        .HasForeignKey("OrderTotalNetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "OrderTotalTax")
                        .WithMany()
                        .HasForeignKey("OrderTotalTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderTotalGross");

                    b.Navigation("OrderTotalNet");

                    b.Navigation("OrderTotalTax");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PriceBreakdown", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberDiscount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Quantity", "Quantity")
                        .WithMany()
                        .HasForeignKey("QuantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "Total")
                        .WithMany()
                        .HasForeignKey("TotalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Quantity");

                    b.Navigation("Total");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Promotions", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberPromotionDetail", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "OrderTotalExcludingPromos")
                        .WithMany()
                        .HasForeignKey("OrderTotalExcludingPromosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "Total")
                        .WithMany()
                        .HasForeignKey("TotalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Details");

                    b.Navigation("OrderTotalExcludingPromos");

                    b.Navigation("Total");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.RemittanceSummary", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Money", "Amount")
                        .WithMany()
                        .HasForeignKey("AmountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amount");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.RemovedModifierItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.SelectedModifierGroup", null)
                        .WithMany("RemovedItems")
                        .HasForeignKey("SelectedModifierGroupId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.SelectedModifierGroup", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.CartItem", null)
                        .WithMany("SelectedModifierGroups")
                        .HasForeignKey("CartItemId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.SelectedModifierItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.SelectedModifierGroup", null)
                        .WithMany("SelectedItems")
                        .HasForeignKey("SelectedModifierGroupId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.ShoppingCart", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.RestrictedItems", "RestrictedItems")
                        .WithMany()
                        .HasForeignKey("RestrictedItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.UberOrder", null)
                        .WithMany("Carts")
                        .HasForeignKey("UberOrderId");

                    b.Navigation("RestrictedItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxBreakdown", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Money", "GrossAmount")
                        .WithMany()
                        .HasForeignKey("GrossAmountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "NetAmount")
                        .WithMany()
                        .HasForeignKey("NetAmountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.TaxReporting", null)
                        .WithMany("Breakdown")
                        .HasForeignKey("TaxReportingId");

                    b.Navigation("GrossAmount");

                    b.Navigation("NetAmount");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxProfile", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.EncryptedTaxId", "EncryptedTaxId")
                        .WithMany()
                        .HasForeignKey("EncryptedTaxIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EncryptedTaxId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Tips", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Money", "Total")
                        .WithMany()
                        .HasForeignKey("TotalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Total");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberCustomer", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.TaxProfile", "TaxProfile")
                        .WithMany()
                        .HasForeignKey("TaxProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.UberOrder", null)
                        .WithMany("Customers")
                        .HasForeignKey("UberOrderId");

                    b.Navigation("Contact");

                    b.Navigation("TaxProfile");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberDiscount", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Quantity", "Quantity")
                        .WithMany()
                        .HasForeignKey("QuantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "Total")
                        .WithMany()
                        .HasForeignKey("TotalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quantity");

                    b.Navigation("Total");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberOrder", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.ActionEligibility", "EligibleActions")
                        .WithMany()
                        .HasForeignKey("EligibleActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.PreparationTime", "PreparationTime")
                        .WithMany()
                        .HasForeignKey("PreparationTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.RetailerLoyaltyInfo", "RetailerLoyaltyInfo")
                        .WithMany()
                        .HasForeignKey("RetailerLoyaltyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.UberStore", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Order", "order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EligibleActions");

                    b.Navigation("Payment");

                    b.Navigation("PreparationTime");

                    b.Navigation("RetailerLoyaltyInfo");

                    b.Navigation("Store");

                    b.Navigation("order");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberPromotionDetail", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.TaxReporting", null)
                        .WithMany("Promotions")
                        .HasForeignKey("TaxReportingId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.DidiOrder", b =>
                {
                    b.Navigation("order_items");

                    b.Navigation("promotions");

                    b.Navigation("shopper_info");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.OrderItemInfo", b =>
                {
                    b.Navigation("sub_item_list");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ShopInfo", b =>
                {
                    b.Navigation("shop_phone");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Item", b =>
                {
                    b.Navigation("subitems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.OrderDetail", b =>
                {
                    b.Navigation("discounts");

                    b.Navigation("items");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Allergy", b =>
                {
                    b.Navigation("AllergensNames");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CartItem", b =>
                {
                    b.Navigation("SelectedModifierGroups");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Fees", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.SelectedModifierGroup", b =>
                {
                    b.Navigation("RemovedItems");

                    b.Navigation("SelectedItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.ShoppingCart", b =>
                {
                    b.Navigation("FulfillmentIssues");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxReporting", b =>
                {
                    b.Navigation("Breakdown");

                    b.Navigation("Fees");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberOrder", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Customers");

                    b.Navigation("Deliveries");

                    b.Navigation("FailureInfo");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberPromotionDetail", b =>
                {
                    b.Navigation("DiscountedItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberStore", b =>
                {
                    b.Navigation("PartnerIdentifiers");
                });
#pragma warning restore 612, 618
        }
    }
}
