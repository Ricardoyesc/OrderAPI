// <auto-generated />
using System;
using Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace OrderAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Context.Entities.Didi.DidiOrder", b =>
                {
                    b.Property<long>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("before_status")
                        .HasColumnType("int");

                    b.Property<int>("cancel_time")
                        .HasColumnType("int");

                    b.Property<int>("city_id")
                        .HasColumnType("int");

                    b.Property<int>("complete_time")
                        .HasColumnType("int");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("create_time")
                        .HasColumnType("int");

                    b.Property<int>("delivery_type")
                        .HasColumnType("int");

                    b.Property<int>("expected_arrived_eta")
                        .HasColumnType("int");

                    b.Property<int>("expected_cook_eta")
                        .HasColumnType("int");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<int>("order_index")
                        .HasColumnType("int");

                    b.Property<int>("pay_time")
                        .HasColumnType("int");

                    b.Property<int>("pay_type")
                        .HasColumnType("int");

                    b.Property<int>("priceid")
                        .HasColumnType("int");

                    b.Property<long>("receive_addressuid")
                        .HasColumnType("bigint");

                    b.Property<string>("remark")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("shop_accept_status")
                        .HasColumnType("int");

                    b.Property<int>("shop_confirm_time")
                        .HasColumnType("int");

                    b.Property<int>("shopid")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("timezone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("order_id");

                    b.HasIndex("orderId");

                    b.HasIndex("priceid");

                    b.HasIndex("receive_addressuid");

                    b.HasIndex("shopid");

                    b.ToTable("DidiOrders");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.OrderItemInfo", b =>
                {
                    b.Property<long>("order_item_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DidiOrderorder_id")
                        .HasColumnType("bigint");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<string>("app_item_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("promo_type")
                        .HasColumnType("int");

                    b.Property<int?>("promotion_detailId")
                        .HasColumnType("int");

                    b.Property<int>("real_price")
                        .HasColumnType("int");

                    b.Property<int>("sku_price")
                        .HasColumnType("int");

                    b.Property<int>("submit_refund_amount")
                        .HasColumnType("int");

                    b.Property<int>("total_price")
                        .HasColumnType("int");

                    b.HasKey("order_item_id");

                    b.HasIndex("DidiOrderorder_id");

                    b.HasIndex("promotion_detailId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.PriceInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("delivery_discount")
                        .HasColumnType("int");

                    b.Property<int>("items_discount")
                        .HasColumnType("int");

                    b.Property<int>("order_price")
                        .HasColumnType("int");

                    b.Property<int>("refund_price")
                        .HasColumnType("int");

                    b.Property<int>("shop_paid_money")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("PricesInfo");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.Promotion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long?>("DidiOrderorder_id")
                        .HasColumnType("bigint");

                    b.Property<int>("promo_discount")
                        .HasColumnType("int");

                    b.Property<int>("promo_type")
                        .HasColumnType("int");

                    b.Property<int>("shop_subside_price")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DidiOrderorder_id");

                    b.ToTable("PromotionsInfo");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.PromotionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("promo_discount")
                        .HasColumnType("int");

                    b.Property<int>("promo_type")
                        .HasColumnType("int");

                    b.Property<int>("shop_subside_price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PromotionDetails");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ReceiveAddress", b =>
                {
                    b.Property<long>("uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("calling_code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("coordinate_type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("country_code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("house_number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("poi_address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("poi_display_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("poi_lat")
                        .HasColumnType("double");

                    b.Property<double>("poi_lng")
                        .HasColumnType("double");

                    b.HasKey("uid");

                    b.ToTable("ReceiveAddresses");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ShopInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("app_shop_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("shop_addr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("shop_id")
                        .HasColumnType("bigint");

                    b.Property<string>("shop_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.Shopper", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long?>("DidiOrderorder_id")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("DidiOrderorder_id");

                    b.ToTable("Shoppers");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ShopPhone", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ShopInfoid")
                        .HasColumnType("int");

                    b.Property<int>("calling_code")
                        .HasColumnType("int");

                    b.Property<long>("phone")
                        .HasColumnType("bigint");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("ShopInfoid");

                    b.ToTable("ShopPhones");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.SubItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long?>("OrderItemInfoorder_item_id")
                        .HasColumnType("bigint");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<string>("app_item_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("sku_price")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("OrderItemInfoorder_item_id");

                    b.ToTable("DidiSubItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.BillingInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("billing_type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("document_number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("document_type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BillingsInformation");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Charge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("service_fee")
                        .HasColumnType("int");

                    b.Property<int>("shipping")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Charges");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("document_number")
                        .HasColumnType("longtext");

                    b.Property<string>("first_name")
                        .HasColumnType("longtext");

                    b.Property<string>("last_name")
                        .HasColumnType("longtext");

                    b.Property<string>("phone_number")
                        .HasColumnType("longtext");

                    b.Property<string>("user_type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.DeliveryDiscount", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("total_percentage_discount")
                        .HasColumnType("int");

                    b.Property<int>("total_value_discount")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("DeliveryDiscounts");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.DeliveryInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("complement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("complete_address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("neighborhood")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("postal_code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("street_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("street_number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DeliveriesInformation");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("OrderDetailorder_id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("amount_by_partner")
                        .HasColumnType("int");

                    b.Property<int>("amount_by_rappi")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<int?>("discount_product_unit_value")
                        .HasColumnType("int");

                    b.Property<int>("discount_product_units")
                        .HasColumnType("int");

                    b.Property<bool>("includes_toppings")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("max_value")
                        .HasColumnType("int");

                    b.Property<int>("percentage_by_partners")
                        .HasColumnType("int");

                    b.Property<int>("percentage_by_rappi")
                        .HasColumnType("int");

                    b.Property<int?>("product_id")
                        .HasColumnType("int");

                    b.Property<int>("raw_value")
                        .HasColumnType("int");

                    b.Property<string>("sku")
                        .HasColumnType("longtext");

                    b.Property<string>("title")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.Property<string>("value_type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailorder_id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Item", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrderDetailorder_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("comments")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<int>("percentage_discount")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("sku")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("OrderDetailorder_id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.OrderDetail", b =>
                {
                    b.Property<string>("order_id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("billing_informationId")
                        .HasColumnType("int");

                    b.Property<int>("coooking_time")
                        .HasColumnType("int");

                    b.Property<string>("created_at")
                        .HasColumnType("longtext");

                    b.Property<int?>("delivery_discountid")
                        .HasColumnType("int");

                    b.Property<int?>("delivery_informationId")
                        .HasColumnType("int");

                    b.Property<string>("delivery_method")
                        .HasColumnType("longtext");

                    b.Property<int>("max_cooking_time")
                        .HasColumnType("int");

                    b.Property<int>("min_cooking_time")
                        .HasColumnType("int");

                    b.Property<string>("payment_method")
                        .HasColumnType("longtext");

                    b.Property<int?>("totalsId")
                        .HasColumnType("int");

                    b.HasKey("order_id");

                    b.HasIndex("billing_informationId");

                    b.HasIndex("delivery_discountid");

                    b.HasIndex("delivery_informationId");

                    b.HasIndex("totalsId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.OtherTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("tip")
                        .HasColumnType("int");

                    b.Property<int>("total_rappi_credits")
                        .HasColumnType("int");

                    b.Property<int>("total_rappi_pay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OtherTotals");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.RappiOrder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("customerId")
                        .HasColumnType("int");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<string>("order_detailorder_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("storeinternal_id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.HasIndex("orderId");

                    b.HasIndex("order_detailorder_id");

                    b.HasIndex("storeinternal_id");

                    b.ToTable("RappiOrders");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Store", b =>
                {
                    b.Property<string>("internal_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("external_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("internal_id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.SubItem", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Itemid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<int>("percentage_discount")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("sku")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Itemid");

                    b.ToTable("RappiSubItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Totals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("chargesId")
                        .HasColumnType("int");

                    b.Property<int>("discount_by_support")
                        .HasColumnType("int");

                    b.Property<int?>("other_totalsId")
                        .HasColumnType("int");

                    b.Property<int>("total_discounts")
                        .HasColumnType("int");

                    b.Property<int>("total_order")
                        .HasColumnType("int");

                    b.Property<int>("total_products")
                        .HasColumnType("int");

                    b.Property<int>("total_to_pay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("chargesId");

                    b.HasIndex("other_totalsId");

                    b.ToTable("Totals");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.MetaInfo", b =>
                {
                    b.Property<string>("resource_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("resource_href")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("resource_id");

                    b.ToTable("MetaInfos");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberOrder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("orderId");

                    b.ToTable("UberOrders");
                });

            modelBuilder.Entity("Entities.Context.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("provider")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.DidiOrder", b =>
                {
                    b.HasOne("Entities.Context.Order", "order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Didi.PriceInfo", "price")
                        .WithMany()
                        .HasForeignKey("priceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Didi.ReceiveAddress", "receive_address")
                        .WithMany()
                        .HasForeignKey("receive_addressuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Didi.ShopInfo", "shop")
                        .WithMany()
                        .HasForeignKey("shopid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("price");

                    b.Navigation("receive_address");

                    b.Navigation("shop");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.OrderItemInfo", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.DidiOrder", null)
                        .WithMany("order_items")
                        .HasForeignKey("DidiOrderorder_id");

                    b.HasOne("Entities.Context.Entities.Didi.PromotionDetail", "promotion_detail")
                        .WithMany()
                        .HasForeignKey("promotion_detailId");

                    b.Navigation("promotion_detail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.Promotion", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.DidiOrder", null)
                        .WithMany("promotions")
                        .HasForeignKey("DidiOrderorder_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.Shopper", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.DidiOrder", null)
                        .WithMany("shopper_info")
                        .HasForeignKey("DidiOrderorder_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ShopPhone", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.ShopInfo", null)
                        .WithMany("shop_phone")
                        .HasForeignKey("ShopInfoid");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.SubItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.OrderItemInfo", null)
                        .WithMany("sub_item_list")
                        .HasForeignKey("OrderItemInfoorder_item_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Discount", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.OrderDetail", null)
                        .WithMany("discounts")
                        .HasForeignKey("OrderDetailorder_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Item", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.OrderDetail", null)
                        .WithMany("items")
                        .HasForeignKey("OrderDetailorder_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.OrderDetail", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.BillingInformation", "billing_information")
                        .WithMany()
                        .HasForeignKey("billing_informationId");

                    b.HasOne("Entities.Context.Entities.Rappi.DeliveryDiscount", "delivery_discount")
                        .WithMany()
                        .HasForeignKey("delivery_discountid");

                    b.HasOne("Entities.Context.Entities.Rappi.DeliveryInformation", "delivery_information")
                        .WithMany()
                        .HasForeignKey("delivery_informationId");

                    b.HasOne("Entities.Context.Entities.Rappi.Totals", "totals")
                        .WithMany()
                        .HasForeignKey("totalsId");

                    b.Navigation("billing_information");

                    b.Navigation("delivery_discount");

                    b.Navigation("delivery_information");

                    b.Navigation("totals");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.RappiOrder", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId");

                    b.HasOne("Entities.Context.Order", "order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Rappi.OrderDetail", "order_detail")
                        .WithMany()
                        .HasForeignKey("order_detailorder_id");

                    b.HasOne("Entities.Context.Entities.Rappi.Store", "store")
                        .WithMany()
                        .HasForeignKey("storeinternal_id");

                    b.Navigation("customer");

                    b.Navigation("order");

                    b.Navigation("order_detail");

                    b.Navigation("store");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.SubItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.Item", null)
                        .WithMany("subitems")
                        .HasForeignKey("Itemid");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Totals", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.Charge", "charges")
                        .WithMany()
                        .HasForeignKey("chargesId");

                    b.HasOne("Entities.Context.Entities.Rappi.OtherTotal", "other_totals")
                        .WithMany()
                        .HasForeignKey("other_totalsId");

                    b.Navigation("charges");

                    b.Navigation("other_totals");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberOrder", b =>
                {
                    b.HasOne("Entities.Context.Order", "order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.DidiOrder", b =>
                {
                    b.Navigation("order_items");

                    b.Navigation("promotions");

                    b.Navigation("shopper_info");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.OrderItemInfo", b =>
                {
                    b.Navigation("sub_item_list");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ShopInfo", b =>
                {
                    b.Navigation("shop_phone");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Item", b =>
                {
                    b.Navigation("subitems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.OrderDetail", b =>
                {
                    b.Navigation("discounts");

                    b.Navigation("items");
                });
#pragma warning restore 612, 618
        }
    }
}
