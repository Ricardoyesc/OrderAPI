// <auto-generated />
using System;
using Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace OrderAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231017075336_create-database")]
    partial class createdatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Context.Entities.Didi.DidiOrder", b =>
                {
                    b.Property<long>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("before_status")
                        .HasColumnType("int");

                    b.Property<int>("cancel_time")
                        .HasColumnType("int");

                    b.Property<int>("city_id")
                        .HasColumnType("int");

                    b.Property<int>("complete_time")
                        .HasColumnType("int");

                    b.Property<string>("country")
                        .HasColumnType("longtext");

                    b.Property<int>("create_time")
                        .HasColumnType("int");

                    b.Property<int>("delivery_type")
                        .HasColumnType("int");

                    b.Property<int>("expected_arrived_eta")
                        .HasColumnType("int");

                    b.Property<int>("expected_cook_eta")
                        .HasColumnType("int");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<int>("order_index")
                        .HasColumnType("int");

                    b.Property<int>("pay_time")
                        .HasColumnType("int");

                    b.Property<int>("pay_type")
                        .HasColumnType("int");

                    b.Property<int>("priceId")
                        .HasColumnType("int");

                    b.Property<long>("receive_addressuid")
                        .HasColumnType("bigint");

                    b.Property<string>("remark")
                        .HasColumnType("longtext");

                    b.Property<int>("shopId")
                        .HasColumnType("int");

                    b.Property<int>("shop_accept_status")
                        .HasColumnType("int");

                    b.Property<int>("shop_confirm_time")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("timezone")
                        .HasColumnType("longtext");

                    b.HasKey("order_id");

                    b.HasIndex("orderId");

                    b.HasIndex("priceId");

                    b.HasIndex("receive_addressuid");

                    b.HasIndex("shopId");

                    b.ToTable("DidiOrders");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.OrderItemInfo", b =>
                {
                    b.Property<long>("order_item_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DidiOrderorder_id")
                        .HasColumnType("bigint");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<string>("app_item_id")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<int>("promo_type")
                        .HasColumnType("int");

                    b.Property<int?>("promotion_detailId")
                        .HasColumnType("int");

                    b.Property<int>("real_price")
                        .HasColumnType("int");

                    b.Property<int>("sku_price")
                        .HasColumnType("int");

                    b.Property<int>("submit_refund_amount")
                        .HasColumnType("int");

                    b.Property<int>("total_price")
                        .HasColumnType("int");

                    b.HasKey("order_item_id");

                    b.HasIndex("DidiOrderorder_id");

                    b.HasIndex("promotion_detailId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.PriceInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("delivery_discount")
                        .HasColumnType("int");

                    b.Property<int>("items_discount")
                        .HasColumnType("int");

                    b.Property<int>("order_price")
                        .HasColumnType("int");

                    b.Property<int>("refund_price")
                        .HasColumnType("int");

                    b.Property<int>("shop_paid_money")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PricesInfo");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long?>("DidiOrderorder_id")
                        .HasColumnType("bigint");

                    b.Property<int>("promo_discount")
                        .HasColumnType("int");

                    b.Property<int>("promo_type")
                        .HasColumnType("int");

                    b.Property<int>("shop_subside_price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DidiOrderorder_id");

                    b.ToTable("PromotionsInfo");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.PromotionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("promo_discount")
                        .HasColumnType("int");

                    b.Property<int>("promo_type")
                        .HasColumnType("int");

                    b.Property<int>("shop_subside_price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PromotionDetails");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ReceiveAddress", b =>
                {
                    b.Property<long>("uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("calling_code")
                        .HasColumnType("longtext");

                    b.Property<string>("city")
                        .HasColumnType("longtext");

                    b.Property<string>("coordinate_type")
                        .HasColumnType("longtext");

                    b.Property<string>("country_code")
                        .HasColumnType("longtext");

                    b.Property<string>("first_name")
                        .HasColumnType("longtext");

                    b.Property<string>("house_number")
                        .HasColumnType("longtext");

                    b.Property<string>("last_name")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .HasColumnType("longtext");

                    b.Property<string>("poi_address")
                        .HasColumnType("longtext");

                    b.Property<string>("poi_display_name")
                        .HasColumnType("longtext");

                    b.Property<double>("poi_lat")
                        .HasColumnType("double");

                    b.Property<double>("poi_lng")
                        .HasColumnType("double");

                    b.HasKey("uid");

                    b.ToTable("ReceiveAddresses");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ShopInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("app_shop_id")
                        .HasColumnType("longtext");

                    b.Property<string>("shop_addr")
                        .HasColumnType("longtext");

                    b.Property<long>("shop_id")
                        .HasColumnType("bigint");

                    b.Property<string>("shop_name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.Shopper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long?>("DidiOrderorder_id")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DidiOrderorder_id");

                    b.ToTable("Shoppers");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ShopPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ShopInfoId")
                        .HasColumnType("int");

                    b.Property<int>("calling_code")
                        .HasColumnType("int");

                    b.Property<long>("phone")
                        .HasColumnType("bigint");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ShopInfoId");

                    b.ToTable("ShopPhones");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.SubItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long?>("OrderItemInfoorder_item_id")
                        .HasColumnType("bigint");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<string>("app_item_id")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<int>("sku_price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemInfoorder_item_id");

                    b.ToTable("DidiSubItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.BillingInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasColumnType("longtext");

                    b.Property<string>("billing_type")
                        .HasColumnType("longtext");

                    b.Property<string>("document_number")
                        .HasColumnType("longtext");

                    b.Property<string>("document_type")
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BillingsInformation");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Charge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("service_fee")
                        .HasColumnType("int");

                    b.Property<int>("shipping")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Charges");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("document_number")
                        .HasColumnType("longtext");

                    b.Property<string>("first_name")
                        .HasColumnType("longtext");

                    b.Property<string>("last_name")
                        .HasColumnType("longtext");

                    b.Property<string>("phone_number")
                        .HasColumnType("longtext");

                    b.Property<string>("user_type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.DeliveryDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("total_percentage_discount")
                        .HasColumnType("int");

                    b.Property<int>("total_value_discount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DeliveryDiscounts");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.DeliveryInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .HasColumnType("longtext");

                    b.Property<string>("complement")
                        .HasColumnType("longtext");

                    b.Property<string>("complete_address")
                        .HasColumnType("longtext");

                    b.Property<string>("neighborhood")
                        .HasColumnType("longtext");

                    b.Property<string>("postal_code")
                        .HasColumnType("longtext");

                    b.Property<string>("street_name")
                        .HasColumnType("longtext");

                    b.Property<string>("street_number")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DeliveriesInformation");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("OrderDetailorder_id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("amount_by_partner")
                        .HasColumnType("int");

                    b.Property<int>("amount_by_rappi")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<int?>("discount_product_unit_value")
                        .HasColumnType("int");

                    b.Property<int>("discount_product_units")
                        .HasColumnType("int");

                    b.Property<bool>("includes_toppings")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("max_value")
                        .HasColumnType("int");

                    b.Property<int>("percentage_by_partners")
                        .HasColumnType("int");

                    b.Property<int>("percentage_by_rappi")
                        .HasColumnType("int");

                    b.Property<int?>("product_id")
                        .HasColumnType("int");

                    b.Property<int>("raw_value")
                        .HasColumnType("int");

                    b.Property<string>("sku")
                        .HasColumnType("longtext");

                    b.Property<string>("title")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.Property<string>("value_type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailorder_id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Item", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrderDetailorder_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("comments")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<int>("percentage_discount")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("sku")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("OrderDetailorder_id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.OrderDetail", b =>
                {
                    b.Property<string>("order_id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("billing_informationId")
                        .HasColumnType("int");

                    b.Property<int>("coooking_time")
                        .HasColumnType("int");

                    b.Property<string>("created_at")
                        .HasColumnType("longtext");

                    b.Property<int?>("delivery_discountId")
                        .HasColumnType("int");

                    b.Property<int?>("delivery_informationId")
                        .HasColumnType("int");

                    b.Property<string>("delivery_method")
                        .HasColumnType("longtext");

                    b.Property<int>("max_cooking_time")
                        .HasColumnType("int");

                    b.Property<int>("min_cooking_time")
                        .HasColumnType("int");

                    b.Property<string>("payment_method")
                        .HasColumnType("longtext");

                    b.Property<int?>("totalsId")
                        .HasColumnType("int");

                    b.HasKey("order_id");

                    b.HasIndex("billing_informationId");

                    b.HasIndex("delivery_discountId");

                    b.HasIndex("delivery_informationId");

                    b.HasIndex("totalsId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.OtherTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("tip")
                        .HasColumnType("int");

                    b.Property<int>("total_rappi_credits")
                        .HasColumnType("int");

                    b.Property<int>("total_rappi_pay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OtherTotals");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.RappiOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("customerId")
                        .HasColumnType("int");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<string>("order_detailorder_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("storeinternal_id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("customerId");

                    b.HasIndex("orderId");

                    b.HasIndex("order_detailorder_id");

                    b.HasIndex("storeinternal_id");

                    b.ToTable("RappiOrders");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Store", b =>
                {
                    b.Property<string>("internal_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("external_id")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.HasKey("internal_id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.SubItem", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Itemid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<int>("percentage_discount")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("sku")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Itemid");

                    b.ToTable("RappiSubItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Totals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("chargesId")
                        .HasColumnType("int");

                    b.Property<int>("discount_by_support")
                        .HasColumnType("int");

                    b.Property<int?>("other_totalsId")
                        .HasColumnType("int");

                    b.Property<int>("total_discounts")
                        .HasColumnType("int");

                    b.Property<int>("total_order")
                        .HasColumnType("int");

                    b.Property<int>("total_products")
                        .HasColumnType("int");

                    b.Property<int>("total_to_pay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("chargesId");

                    b.HasIndex("other_totalsId");

                    b.ToTable("Totals");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.ActionEligibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("can_adjust_ready_for_pickup_time")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("can_mark_out_of_item")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("cancel")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("ActionEligibility");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Adjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("detailsId")
                        .HasColumnType("int");

                    b.Property<int?>("totalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("detailsId");

                    b.HasIndex("totalId");

                    b.ToTable("Adjustments");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.AdjustmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("amountId")
                        .HasColumnType("int");

                    b.Property<string>("reason")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("amountId");

                    b.ToTable("AdjustmentDetail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Allergen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("AllergyId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.ToTable("Allergens");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("instructions")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("cart_item_id")
                        .HasColumnType("longtext");

                    b.Property<string>("customer_id")
                        .HasColumnType("longtext");

                    b.Property<int>("customer_requestsId")
                        .HasColumnType("int");

                    b.Property<int>("default_quantityId")
                        .HasColumnType("int");

                    b.Property<string>("external_data")
                        .HasColumnType("longtext");

                    b.Property<string>("item_id")
                        .HasColumnType("longtext");

                    b.Property<string>("picture_url")
                        .HasColumnType("longtext");

                    b.Property<int>("quantityId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartid");

                    b.HasIndex("customer_requestsId");

                    b.HasIndex("default_quantityId");

                    b.HasIndex("quantityId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CashAmountDue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("display_amount")
                        .HasColumnType("longtext");

                    b.Property<int?>("grossId")
                        .HasColumnType("int");

                    b.Property<bool>("is_tax_inclusive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("netId")
                        .HasColumnType("int");

                    b.Property<int?>("taxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("grossId");

                    b.HasIndex("netId");

                    b.HasIndex("taxId");

                    b.ToTable("CashAmountDue");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("country_iso2")
                        .HasColumnType("longtext");

                    b.Property<string>("number")
                        .HasColumnType("longtext");

                    b.Property<string>("pin_code")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CurrentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("latitude")
                        .HasColumnType("double");

                    b.Property<double>("longitude")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("CurrentLocation");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CustomerRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("allergyId")
                        .HasColumnType("int");

                    b.Property<string>("special_instructions")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("allergyId");

                    b.ToTable("CustomerRequests");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid?>("UberOrderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("delivery_id")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("delivery_partner_marked_not_ready_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("delivery_partnerid")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("estimated_pick_up_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("instructions")
                        .HasColumnType("longtext");

                    b.Property<string>("interaction_type")
                        .HasColumnType("longtext");

                    b.Property<string>("locationid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UberOrderId");

                    b.HasIndex("delivery_partnerid");

                    b.HasIndex("locationid");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.DeliveryPartner", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("contactId")
                        .HasColumnType("int");

                    b.Property<int?>("current_locationId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<int?>("vehicleId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("contactId");

                    b.HasIndex("current_locationId");

                    b.HasIndex("vehicleId");

                    b.ToTable("DeliveryPartner");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Discounted", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("discountId")
                        .HasColumnType("int");

                    b.Property<string>("price_type")
                        .HasColumnType("longtext");

                    b.Property<int>("quantityId")
                        .HasColumnType("int");

                    b.Property<int?>("totalId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("discountId");

                    b.HasIndex("quantityId");

                    b.HasIndex("totalId");

                    b.ToTable("Discounteds");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.DiscountedItem", b =>
                {
                    b.Property<string>("external_id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UberPromotionDetailId")
                        .HasColumnType("int");

                    b.Property<string>("discount_amount_applied")
                        .HasColumnType("longtext");

                    b.Property<string>("discounted_quantity")
                        .HasColumnType("longtext");

                    b.HasKey("external_id");

                    b.HasIndex("UberPromotionDetailId");

                    b.ToTable("DiscountedItem");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.DiscountedItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("discount_amount_applied")
                        .HasColumnType("int");

                    b.Property<int>("discounted_quantity")
                        .HasColumnType("int");

                    b.Property<string>("external_id")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DiscountedItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.EligibleActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("can_adjust_ready_for_pickup_time")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("can_mark_out_of_item")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("cancel")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("EligibleActions");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.EncryptedTaxId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cipher_text")
                        .HasColumnType("longtext");

                    b.Property<string>("key")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EncryptedTaxId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.FailureInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid?>("UberOrderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("failure_attributed_to_party")
                        .HasColumnType("longtext");

                    b.Property<string>("reason")
                        .HasColumnType("longtext");

                    b.Property<int>("time_rangeId")
                        .HasColumnType("int");

                    b.Property<bool>("will_merchant_be_paid")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UberOrderId");

                    b.HasIndex("time_rangeId");

                    b.ToTable("FailureInfos");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.FeeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("TaxBreakdownId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxBreakdownId1")
                        .HasColumnType("int");

                    b.Property<int?>("TaxBreakdownId2")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<int?>("gross_amountId")
                        .HasColumnType("int");

                    b.Property<string>("instance_id")
                        .HasColumnType("longtext");

                    b.Property<int?>("net_amountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaxBreakdownId");

                    b.HasIndex("TaxBreakdownId1");

                    b.HasIndex("TaxBreakdownId2");

                    b.HasIndex("gross_amountId");

                    b.HasIndex("net_amountId");

                    b.ToTable("FeeDetail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Fees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("totalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("totalId");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.FulfillmentIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("action_type")
                        .HasColumnType("longtext");

                    b.Property<string>("cart_item_id")
                        .HasColumnType("longtext");

                    b.Property<string>("issue_type")
                        .HasColumnType("longtext");

                    b.Property<string>("store_response")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("suspend_until")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartid");

                    b.ToTable("FulfillmentIssue");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.ItemCharges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("discountId")
                        .HasColumnType("int");

                    b.Property<int?>("price_breakdownId")
                        .HasColumnType("int");

                    b.Property<int?>("subtotal_including_promosId")
                        .HasColumnType("int");

                    b.Property<int?>("totalId")
                        .HasColumnType("int");

                    b.Property<int?>("unitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("discountId");

                    b.HasIndex("price_breakdownId");

                    b.HasIndex("subtotal_including_promosId");

                    b.HasIndex("totalId");

                    b.HasIndex("unitId");

                    b.ToTable("ItemCharges");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Location", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("business_name")
                        .HasColumnType("longtext");

                    b.Property<string>("city")
                        .HasColumnType("longtext");

                    b.Property<string>("client_provided_street_address_line_one")
                        .HasColumnType("longtext");

                    b.Property<string>("country")
                        .HasColumnType("longtext");

                    b.Property<double>("latitude")
                        .HasColumnType("double");

                    b.Property<string>("location_type_value")
                        .HasColumnType("longtext");

                    b.Property<double>("longitude")
                        .HasColumnType("double");

                    b.Property<int>("postal_code")
                        .HasColumnType("int");

                    b.Property<string>("street_address_line_one")
                        .HasColumnType("longtext");

                    b.Property<string>("street_address_line_two")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.Property<int>("unit_number")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.MerchantFee", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("FeesId")
                        .HasColumnType("int");

                    b.Property<int?>("amountId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("FeesId");

                    b.HasIndex("amountId");

                    b.ToTable("MerchantFee");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.MetaInfo", b =>
                {
                    b.Property<string>("resource_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("resource_href")
                        .HasColumnType("longtext");

                    b.HasKey("resource_id");

                    b.ToTable("MetaInfos");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Money", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("amount_e5")
                        .HasColumnType("int");

                    b.Property<string>("currency_code")
                        .HasColumnType("longtext");

                    b.Property<string>("formatted")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Monies");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Name", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("display_name")
                        .HasColumnType("longtext");

                    b.Property<string>("first_name")
                        .HasColumnType("longtext");

                    b.Property<string>("last_name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Name");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.OAuthToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccessToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("OAuthTokens");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.OrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("past_order_count")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderHistory");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PartnerIdentifier", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UberStoreid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("UberStoreid");

                    b.ToTable("PartnerIdentifier");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("adjustmentId")
                        .HasColumnType("int");

                    b.Property<int?>("cash_amount_dueId")
                        .HasColumnType("int");

                    b.Property<int?>("feesId")
                        .HasColumnType("int");

                    b.Property<int?>("item_chargesId")
                        .HasColumnType("int");

                    b.Property<int?>("payment_detailId")
                        .HasColumnType("int");

                    b.Property<int?>("promotionsId")
                        .HasColumnType("int");

                    b.Property<int?>("tax_reportingId")
                        .HasColumnType("int");

                    b.Property<int?>("tipsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("adjustmentId");

                    b.HasIndex("cash_amount_dueId");

                    b.HasIndex("feesId");

                    b.HasIndex("item_chargesId");

                    b.HasIndex("payment_detailId");

                    b.HasIndex("promotionsId");

                    b.HasIndex("tax_reportingId");

                    b.HasIndex("tipsId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("adjustmentId")
                        .HasColumnType("int");

                    b.Property<int>("cash_amount_dueId")
                        .HasColumnType("int");

                    b.Property<int>("feesId")
                        .HasColumnType("int");

                    b.Property<bool>("is_tax_inclusive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("item_chargesId")
                        .HasColumnType("int");

                    b.Property<int>("order_totalId")
                        .HasColumnType("int");

                    b.Property<int>("promotionsId")
                        .HasColumnType("int");

                    b.Property<int>("tipsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("adjustmentId");

                    b.HasIndex("cash_amount_dueId");

                    b.HasIndex("feesId");

                    b.HasIndex("item_chargesId");

                    b.HasIndex("order_totalId");

                    b.HasIndex("promotionsId");

                    b.HasIndex("tipsId");

                    b.ToTable("PaymentDetail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PreparationTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ready_for_pickup_time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ready_for_pickup_time_secs")
                        .HasColumnType("int");

                    b.Property<string>("source")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PreparationTimes");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PriceBreakdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cart_item_id")
                        .HasColumnType("longtext");

                    b.Property<int?>("discountId")
                        .HasColumnType("int");

                    b.Property<bool>("is_tax_inclusive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("quantityId")
                        .HasColumnType("int");

                    b.Property<int?>("totalId")
                        .HasColumnType("int");

                    b.Property<int?>("unitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("discountId");

                    b.HasIndex("quantityId");

                    b.HasIndex("totalId");

                    b.HasIndex("unitId");

                    b.ToTable("PriceBreakdowns");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Promotions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("detailsId")
                        .HasColumnType("int");

                    b.Property<int?>("order_total_excluding_promosId")
                        .HasColumnType("int");

                    b.Property<int?>("totalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("detailsId");

                    b.HasIndex("order_total_excluding_promosId");

                    b.HasIndex("totalId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Quantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<string>("unit")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Quantity");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.RemittanceSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("TaxReportingId")
                        .HasColumnType("int");

                    b.Property<int?>("amountId")
                        .HasColumnType("int");

                    b.Property<string>("entity")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("TaxReportingId");

                    b.HasIndex("amountId");

                    b.ToTable("RemittanceSummaries");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.RemovedModifierItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SelectedModifierGroupid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("modifier_item_id")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SelectedModifierGroupid");

                    b.ToTable("RemovedModifierItem");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.RestrictedItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("contain_alcoholic_item")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("contain_tobacco_product")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("RestrictedItems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.RetailerLoyaltyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("loyalty_number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RetailerLoyaltyInfos");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.SelectedModifierGroup", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("CartItemId")
                        .HasColumnType("int");

                    b.Property<string>("external_data")
                        .HasColumnType("longtext");

                    b.Property<string>("title")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("CartItemId");

                    b.ToTable("SelectedModifierGroup");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.SelectedModifierItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SelectedModifierGroupid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("modifier_item_id")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SelectedModifierGroupid");

                    b.ToTable("SelectedModifierItem");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.ShoppingCart", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UberOrderId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("include_single_use_items")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("restricted_itemsId")
                        .HasColumnType("int");

                    b.Property<string>("special_instructions")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("UberOrderId");

                    b.HasIndex("restricted_itemsId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxBreakdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TaxBreakdown");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxLocation", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("country_iso2")
                        .HasColumnType("longtext");

                    b.Property<string>("postal_code")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("TaxLocation");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("billing_address")
                        .HasColumnType("longtext");

                    b.Property<string>("country")
                        .HasColumnType("longtext");

                    b.Property<string>("customer_full_name")
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .HasColumnType("longtext");

                    b.Property<int>("encrypted_tax_idId")
                        .HasColumnType("int");

                    b.Property<string>("legal_entity_name")
                        .HasColumnType("longtext");

                    b.Property<string>("tax_id_type")
                        .HasColumnType("longtext");

                    b.Property<string>("tax_ids")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("encrypted_tax_idId");

                    b.ToTable("TaxProfile");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxReporting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("breakdownId")
                        .HasColumnType("int");

                    b.Property<string>("destinationid")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("originid")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("breakdownId");

                    b.HasIndex("destinationid");

                    b.HasIndex("originid");

                    b.ToTable("TaxReportings");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TimeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("end_time")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TimeRanges");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Tips", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("totalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("totalId");

                    b.ToTable("Tips");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberCustomer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UberOrderId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("can_response_to_fulfillment_issues")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("contactId")
                        .HasColumnType("int");

                    b.Property<bool>("is_primary_customer")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("nameId")
                        .HasColumnType("int");

                    b.Property<int>("order_historyId")
                        .HasColumnType("int");

                    b.Property<int>("tax_profileId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UberOrderId");

                    b.HasIndex("contactId");

                    b.HasIndex("nameId");

                    b.HasIndex("order_historyId");

                    b.HasIndex("tax_profileId");

                    b.ToTable("UberCustomers");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("quantityId")
                        .HasColumnType("int");

                    b.Property<int?>("totalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("quantityId");

                    b.HasIndex("totalId");

                    b.ToTable("UberDiscounts");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("completed_time")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("created_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("display_id")
                        .HasColumnType("longtext");

                    b.Property<int?>("eligible_actionsId")
                        .HasColumnType("int");

                    b.Property<string>("external_id")
                        .HasColumnType("longtext");

                    b.Property<string>("fulfillment_type")
                        .HasColumnType("longtext");

                    b.Property<bool>("has_membership_pass")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_order_accuracy_risk")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<string>("order_id")
                        .HasColumnType("longtext");

                    b.Property<string>("ordering_platform")
                        .HasColumnType("longtext");

                    b.Property<int?>("paymentId")
                        .HasColumnType("int");

                    b.Property<string>("preparation_status")
                        .HasColumnType("longtext");

                    b.Property<int?>("preparation_timeId")
                        .HasColumnType("int");

                    b.Property<int?>("retailer_loyalty_infoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("scheduled_order_target_delivery_end_time")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("scheduled_order_target_delivery_start_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("state")
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.Property<int>("store_id")
                        .HasColumnType("int");

                    b.Property<string>("store_instructions")
                        .HasColumnType("longtext");

                    b.Property<string>("storeid")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("eligible_actionsId");

                    b.HasIndex("orderId");

                    b.HasIndex("paymentId");

                    b.HasIndex("preparation_timeId");

                    b.HasIndex("retailer_loyalty_infoId");

                    b.HasIndex("storeid");

                    b.ToTable("UberOrders");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberPromotionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("discount_delivery_fee_value")
                        .HasColumnType("int");

                    b.Property<string>("discount_percentage")
                        .HasColumnType("longtext");

                    b.Property<string>("discount_value")
                        .HasColumnType("longtext");

                    b.Property<string>("external_promotion_id")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UberPromotionDetail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberStore", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("UberStores");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("color")
                        .HasColumnType("longtext");

                    b.Property<bool>("is_autonomous")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("license_plate")
                        .HasColumnType("longtext");

                    b.Property<string>("make")
                        .HasColumnType("longtext");

                    b.Property<string>("model")
                        .HasColumnType("longtext");

                    b.Property<string>("passcode")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Entities.Context.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("provider")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.DidiOrder", b =>
                {
                    b.HasOne("Entities.Context.Order", "order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Didi.PriceInfo", "price")
                        .WithMany()
                        .HasForeignKey("priceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Didi.ReceiveAddress", "receive_address")
                        .WithMany()
                        .HasForeignKey("receive_addressuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Didi.ShopInfo", "shop")
                        .WithMany()
                        .HasForeignKey("shopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("price");

                    b.Navigation("receive_address");

                    b.Navigation("shop");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.OrderItemInfo", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.DidiOrder", null)
                        .WithMany("order_items")
                        .HasForeignKey("DidiOrderorder_id");

                    b.HasOne("Entities.Context.Entities.Didi.PromotionDetail", "promotion_detail")
                        .WithMany()
                        .HasForeignKey("promotion_detailId");

                    b.Navigation("promotion_detail");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.Promotion", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.DidiOrder", null)
                        .WithMany("promotions")
                        .HasForeignKey("DidiOrderorder_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.Shopper", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.DidiOrder", null)
                        .WithMany("shopper_info")
                        .HasForeignKey("DidiOrderorder_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ShopPhone", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.ShopInfo", null)
                        .WithMany("shop_phone")
                        .HasForeignKey("ShopInfoId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.SubItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Didi.OrderItemInfo", null)
                        .WithMany("sub_item_list")
                        .HasForeignKey("OrderItemInfoorder_item_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Discount", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.OrderDetail", null)
                        .WithMany("discounts")
                        .HasForeignKey("OrderDetailorder_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Item", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.OrderDetail", null)
                        .WithMany("items")
                        .HasForeignKey("OrderDetailorder_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.OrderDetail", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.BillingInformation", "billing_information")
                        .WithMany()
                        .HasForeignKey("billing_informationId");

                    b.HasOne("Entities.Context.Entities.Rappi.DeliveryDiscount", "delivery_discount")
                        .WithMany()
                        .HasForeignKey("delivery_discountId");

                    b.HasOne("Entities.Context.Entities.Rappi.DeliveryInformation", "delivery_information")
                        .WithMany()
                        .HasForeignKey("delivery_informationId");

                    b.HasOne("Entities.Context.Entities.Rappi.Totals", "totals")
                        .WithMany()
                        .HasForeignKey("totalsId");

                    b.Navigation("billing_information");

                    b.Navigation("delivery_discount");

                    b.Navigation("delivery_information");

                    b.Navigation("totals");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.RappiOrder", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId");

                    b.HasOne("Entities.Context.Order", "order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Rappi.OrderDetail", "order_detail")
                        .WithMany()
                        .HasForeignKey("order_detailorder_id");

                    b.HasOne("Entities.Context.Entities.Rappi.Store", "store")
                        .WithMany()
                        .HasForeignKey("storeinternal_id");

                    b.Navigation("customer");

                    b.Navigation("order");

                    b.Navigation("order_detail");

                    b.Navigation("store");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.SubItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.Item", null)
                        .WithMany("subitems")
                        .HasForeignKey("Itemid");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Totals", b =>
                {
                    b.HasOne("Entities.Context.Entities.Rappi.Charge", "charges")
                        .WithMany()
                        .HasForeignKey("chargesId");

                    b.HasOne("Entities.Context.Entities.Rappi.OtherTotal", "other_totals")
                        .WithMany()
                        .HasForeignKey("other_totalsId");

                    b.Navigation("charges");

                    b.Navigation("other_totals");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Adjustment", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.AdjustmentDetail", "details")
                        .WithMany()
                        .HasForeignKey("detailsId");

                    b.HasOne("Entities.Context.Entities.Uber.CashAmountDue", "total")
                        .WithMany()
                        .HasForeignKey("totalId");

                    b.Navigation("details");

                    b.Navigation("total");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.AdjustmentDetail", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.CashAmountDue", "amount")
                        .WithMany()
                        .HasForeignKey("amountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("amount");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Allergen", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Allergy", null)
                        .WithMany("AllergensNames")
                        .HasForeignKey("AllergyId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CartItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.ShoppingCart", null)
                        .WithMany("items")
                        .HasForeignKey("ShoppingCartid");

                    b.HasOne("Entities.Context.Entities.Uber.CustomerRequests", "customer_requests")
                        .WithMany()
                        .HasForeignKey("customer_requestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Quantity", "default_quantity")
                        .WithMany()
                        .HasForeignKey("default_quantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Quantity", "quantity")
                        .WithMany()
                        .HasForeignKey("quantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer_requests");

                    b.Navigation("default_quantity");

                    b.Navigation("quantity");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CashAmountDue", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Money", "gross")
                        .WithMany()
                        .HasForeignKey("grossId");

                    b.HasOne("Entities.Context.Entities.Uber.Money", "net")
                        .WithMany()
                        .HasForeignKey("netId");

                    b.HasOne("Entities.Context.Entities.Uber.Money", "tax")
                        .WithMany()
                        .HasForeignKey("taxId");

                    b.Navigation("gross");

                    b.Navigation("net");

                    b.Navigation("tax");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CustomerRequests", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Allergy", "allergy")
                        .WithMany()
                        .HasForeignKey("allergyId");

                    b.Navigation("allergy");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Delivery", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberOrder", null)
                        .WithMany("deliveries")
                        .HasForeignKey("UberOrderId");

                    b.HasOne("Entities.Context.Entities.Uber.DeliveryPartner", "delivery_partner")
                        .WithMany()
                        .HasForeignKey("delivery_partnerid");

                    b.HasOne("Entities.Context.Entities.Uber.Location", "location")
                        .WithMany()
                        .HasForeignKey("locationid");

                    b.Navigation("delivery_partner");

                    b.Navigation("location");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.DeliveryPartner", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("contactId");

                    b.HasOne("Entities.Context.Entities.Uber.CurrentLocation", "current_location")
                        .WithMany()
                        .HasForeignKey("current_locationId");

                    b.HasOne("Entities.Context.Entities.Uber.Vehicle", "vehicle")
                        .WithMany()
                        .HasForeignKey("vehicleId");

                    b.Navigation("contact");

                    b.Navigation("current_location");

                    b.Navigation("vehicle");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Discounted", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberDiscount", "discount")
                        .WithMany()
                        .HasForeignKey("discountId");

                    b.HasOne("Entities.Context.Entities.Uber.Quantity", "quantity")
                        .WithMany()
                        .HasForeignKey("quantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "total")
                        .WithMany()
                        .HasForeignKey("totalId");

                    b.Navigation("discount");

                    b.Navigation("quantity");

                    b.Navigation("total");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.DiscountedItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberPromotionDetail", null)
                        .WithMany("discounted_items")
                        .HasForeignKey("UberPromotionDetailId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.FailureInfo", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberOrder", null)
                        .WithMany("failure_info")
                        .HasForeignKey("UberOrderId");

                    b.HasOne("Entities.Context.Entities.Uber.TimeRange", "time_range")
                        .WithMany()
                        .HasForeignKey("time_rangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("time_range");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.FeeDetail", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.TaxBreakdown", null)
                        .WithMany("fees")
                        .HasForeignKey("TaxBreakdownId");

                    b.HasOne("Entities.Context.Entities.Uber.TaxBreakdown", null)
                        .WithMany("items")
                        .HasForeignKey("TaxBreakdownId1");

                    b.HasOne("Entities.Context.Entities.Uber.TaxBreakdown", null)
                        .WithMany("promotions")
                        .HasForeignKey("TaxBreakdownId2");

                    b.HasOne("Entities.Context.Entities.Uber.Money", "gross_amount")
                        .WithMany()
                        .HasForeignKey("gross_amountId");

                    b.HasOne("Entities.Context.Entities.Uber.Money", "net_amount")
                        .WithMany()
                        .HasForeignKey("net_amountId");

                    b.Navigation("gross_amount");

                    b.Navigation("net_amount");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Fees", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.CashAmountDue", "total")
                        .WithMany()
                        .HasForeignKey("totalId");

                    b.Navigation("total");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.FulfillmentIssue", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.ShoppingCart", null)
                        .WithMany("fulfillment_issues")
                        .HasForeignKey("ShoppingCartid");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.ItemCharges", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberDiscount", "discount")
                        .WithMany()
                        .HasForeignKey("discountId");

                    b.HasOne("Entities.Context.Entities.Uber.PriceBreakdown", "price_breakdown")
                        .WithMany()
                        .HasForeignKey("price_breakdownId");

                    b.HasOne("Entities.Context.Entities.Uber.Money", "subtotal_including_promos")
                        .WithMany()
                        .HasForeignKey("subtotal_including_promosId");

                    b.HasOne("Entities.Context.Entities.Uber.Money", "total")
                        .WithMany()
                        .HasForeignKey("totalId");

                    b.HasOne("Entities.Context.Entities.Uber.Money", "unit")
                        .WithMany()
                        .HasForeignKey("unitId");

                    b.Navigation("discount");

                    b.Navigation("price_breakdown");

                    b.Navigation("subtotal_including_promos");

                    b.Navigation("total");

                    b.Navigation("unit");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.MerchantFee", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Fees", null)
                        .WithMany("details")
                        .HasForeignKey("FeesId");

                    b.HasOne("Entities.Context.Entities.Uber.CashAmountDue", "amount")
                        .WithMany()
                        .HasForeignKey("amountId");

                    b.Navigation("amount");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PartnerIdentifier", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberStore", null)
                        .WithMany("partner_identifiers")
                        .HasForeignKey("UberStoreid");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Payment", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Adjustment", "adjustment")
                        .WithMany()
                        .HasForeignKey("adjustmentId");

                    b.HasOne("Entities.Context.Entities.Uber.CashAmountDue", "cash_amount_due")
                        .WithMany()
                        .HasForeignKey("cash_amount_dueId");

                    b.HasOne("Entities.Context.Entities.Uber.Fees", "fees")
                        .WithMany()
                        .HasForeignKey("feesId");

                    b.HasOne("Entities.Context.Entities.Uber.ItemCharges", "item_charges")
                        .WithMany()
                        .HasForeignKey("item_chargesId");

                    b.HasOne("Entities.Context.Entities.Uber.PaymentDetail", "payment_detail")
                        .WithMany()
                        .HasForeignKey("payment_detailId");

                    b.HasOne("Entities.Context.Entities.Uber.Promotions", "promotions")
                        .WithMany()
                        .HasForeignKey("promotionsId");

                    b.HasOne("Entities.Context.Entities.Uber.TaxReporting", "tax_reporting")
                        .WithMany()
                        .HasForeignKey("tax_reportingId");

                    b.HasOne("Entities.Context.Entities.Uber.Tips", "tips")
                        .WithMany()
                        .HasForeignKey("tipsId");

                    b.Navigation("adjustment");

                    b.Navigation("cash_amount_due");

                    b.Navigation("fees");

                    b.Navigation("item_charges");

                    b.Navigation("payment_detail");

                    b.Navigation("promotions");

                    b.Navigation("tax_reporting");

                    b.Navigation("tips");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PaymentDetail", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Adjustment", "adjustment")
                        .WithMany()
                        .HasForeignKey("adjustmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.CashAmountDue", "cash_amount_due")
                        .WithMany()
                        .HasForeignKey("cash_amount_dueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Fees", "fees")
                        .WithMany()
                        .HasForeignKey("feesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.ItemCharges", "item_charges")
                        .WithMany()
                        .HasForeignKey("item_chargesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.CashAmountDue", "order_total")
                        .WithMany()
                        .HasForeignKey("order_totalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Promotions", "promotions")
                        .WithMany()
                        .HasForeignKey("promotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Tips", "tips")
                        .WithMany()
                        .HasForeignKey("tipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("adjustment");

                    b.Navigation("cash_amount_due");

                    b.Navigation("fees");

                    b.Navigation("item_charges");

                    b.Navigation("order_total");

                    b.Navigation("promotions");

                    b.Navigation("tips");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.PriceBreakdown", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberDiscount", "discount")
                        .WithMany()
                        .HasForeignKey("discountId");

                    b.HasOne("Entities.Context.Entities.Uber.Quantity", "quantity")
                        .WithMany()
                        .HasForeignKey("quantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "total")
                        .WithMany()
                        .HasForeignKey("totalId");

                    b.HasOne("Entities.Context.Entities.Uber.Money", "unit")
                        .WithMany()
                        .HasForeignKey("unitId");

                    b.Navigation("discount");

                    b.Navigation("quantity");

                    b.Navigation("total");

                    b.Navigation("unit");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Promotions", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberPromotionDetail", "details")
                        .WithMany()
                        .HasForeignKey("detailsId");

                    b.HasOne("Entities.Context.Entities.Uber.CashAmountDue", "order_total_excluding_promos")
                        .WithMany()
                        .HasForeignKey("order_total_excluding_promosId");

                    b.HasOne("Entities.Context.Entities.Uber.CashAmountDue", "total")
                        .WithMany()
                        .HasForeignKey("totalId");

                    b.Navigation("details");

                    b.Navigation("order_total_excluding_promos");

                    b.Navigation("total");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.RemittanceSummary", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.TaxReporting", null)
                        .WithMany("remittance_info")
                        .HasForeignKey("TaxReportingId");

                    b.HasOne("Entities.Context.Entities.Uber.Money", "amount")
                        .WithMany()
                        .HasForeignKey("amountId");

                    b.Navigation("amount");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.RemovedModifierItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.SelectedModifierGroup", null)
                        .WithMany("removed_items")
                        .HasForeignKey("SelectedModifierGroupid");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.SelectedModifierGroup", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.CartItem", null)
                        .WithMany("selected_modifier_groups")
                        .HasForeignKey("CartItemId");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.SelectedModifierItem", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.SelectedModifierGroup", null)
                        .WithMany("selected_items")
                        .HasForeignKey("SelectedModifierGroupid");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.ShoppingCart", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberOrder", null)
                        .WithMany("carts")
                        .HasForeignKey("UberOrderId");

                    b.HasOne("Entities.Context.Entities.Uber.RestrictedItems", "restricted_items")
                        .WithMany()
                        .HasForeignKey("restricted_itemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("restricted_items");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxProfile", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.EncryptedTaxId", "encrypted_tax_id")
                        .WithMany()
                        .HasForeignKey("encrypted_tax_idId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("encrypted_tax_id");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxReporting", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.TaxBreakdown", "breakdown")
                        .WithMany()
                        .HasForeignKey("breakdownId");

                    b.HasOne("Entities.Context.Entities.Uber.TaxLocation", "destination")
                        .WithMany()
                        .HasForeignKey("destinationid");

                    b.HasOne("Entities.Context.Entities.Uber.TaxLocation", "origin")
                        .WithMany()
                        .HasForeignKey("originid");

                    b.Navigation("breakdown");

                    b.Navigation("destination");

                    b.Navigation("origin");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Tips", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.CashAmountDue", "total")
                        .WithMany()
                        .HasForeignKey("totalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("total");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberCustomer", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.UberOrder", null)
                        .WithMany("customers")
                        .HasForeignKey("UberOrderId");

                    b.HasOne("Entities.Context.Entities.Uber.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("contactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Name", "name")
                        .WithMany()
                        .HasForeignKey("nameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.OrderHistory", "order_history")
                        .WithMany()
                        .HasForeignKey("order_historyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.TaxProfile", "tax_profile")
                        .WithMany()
                        .HasForeignKey("tax_profileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contact");

                    b.Navigation("name");

                    b.Navigation("order_history");

                    b.Navigation("tax_profile");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberDiscount", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.Quantity", "quantity")
                        .WithMany()
                        .HasForeignKey("quantityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Money", "total")
                        .WithMany()
                        .HasForeignKey("totalId");

                    b.Navigation("quantity");

                    b.Navigation("total");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberOrder", b =>
                {
                    b.HasOne("Entities.Context.Entities.Uber.ActionEligibility", "eligible_actions")
                        .WithMany()
                        .HasForeignKey("eligible_actionsId");

                    b.HasOne("Entities.Context.Order", "order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Context.Entities.Uber.Payment", "payment")
                        .WithMany()
                        .HasForeignKey("paymentId");

                    b.HasOne("Entities.Context.Entities.Uber.PreparationTime", "preparation_time")
                        .WithMany()
                        .HasForeignKey("preparation_timeId");

                    b.HasOne("Entities.Context.Entities.Uber.RetailerLoyaltyInfo", "retailer_loyalty_info")
                        .WithMany()
                        .HasForeignKey("retailer_loyalty_infoId");

                    b.HasOne("Entities.Context.Entities.Uber.UberStore", "store")
                        .WithMany()
                        .HasForeignKey("storeid");

                    b.Navigation("eligible_actions");

                    b.Navigation("order");

                    b.Navigation("payment");

                    b.Navigation("preparation_time");

                    b.Navigation("retailer_loyalty_info");

                    b.Navigation("store");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.DidiOrder", b =>
                {
                    b.Navigation("order_items");

                    b.Navigation("promotions");

                    b.Navigation("shopper_info");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.OrderItemInfo", b =>
                {
                    b.Navigation("sub_item_list");
                });

            modelBuilder.Entity("Entities.Context.Entities.Didi.ShopInfo", b =>
                {
                    b.Navigation("shop_phone");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.Item", b =>
                {
                    b.Navigation("subitems");
                });

            modelBuilder.Entity("Entities.Context.Entities.Rappi.OrderDetail", b =>
                {
                    b.Navigation("discounts");

                    b.Navigation("items");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Allergy", b =>
                {
                    b.Navigation("AllergensNames");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.CartItem", b =>
                {
                    b.Navigation("selected_modifier_groups");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.Fees", b =>
                {
                    b.Navigation("details");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.SelectedModifierGroup", b =>
                {
                    b.Navigation("removed_items");

                    b.Navigation("selected_items");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.ShoppingCart", b =>
                {
                    b.Navigation("fulfillment_issues");

                    b.Navigation("items");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxBreakdown", b =>
                {
                    b.Navigation("fees");

                    b.Navigation("items");

                    b.Navigation("promotions");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.TaxReporting", b =>
                {
                    b.Navigation("remittance_info");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberOrder", b =>
                {
                    b.Navigation("carts");

                    b.Navigation("customers");

                    b.Navigation("deliveries");

                    b.Navigation("failure_info");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberPromotionDetail", b =>
                {
                    b.Navigation("discounted_items");
                });

            modelBuilder.Entity("Entities.Context.Entities.Uber.UberStore", b =>
                {
                    b.Navigation("partner_identifiers");
                });
#pragma warning restore 612, 618
        }
    }
}
